// Code generated by MockGen. DO NOT EDIT.
// Source: price_list_server.go

// Package pricelistserver is a generated GoMock package.
package pricelistserver

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.com/isavinof/pricer/types"
	reflect "reflect"
)

// MockMarketDataProvider is a mock of MarketDataProvider interface
type MockMarketDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMarketDataProviderMockRecorder
}

// MockMarketDataProviderMockRecorder is the mock recorder for MockMarketDataProvider
type MockMarketDataProviderMockRecorder struct {
	mock *MockMarketDataProvider
}

// NewMockMarketDataProvider creates a new mock instance
func NewMockMarketDataProvider(ctrl *gomock.Controller) *MockMarketDataProvider {
	mock := &MockMarketDataProvider{ctrl: ctrl}
	mock.recorder = &MockMarketDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketDataProvider) EXPECT() *MockMarketDataProviderMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockMarketDataProvider) Fetch(ctx context.Context, url string) ([]types.ProductPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, url)
	ret0, _ := ret[0].([]types.ProductPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockMarketDataProviderMockRecorder) Fetch(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockMarketDataProvider)(nil).Fetch), ctx, url)
}

// MockMarketDataStore is a mock of MarketDataStore interface
type MockMarketDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockMarketDataStoreMockRecorder
}

// MockMarketDataStoreMockRecorder is the mock recorder for MockMarketDataStore
type MockMarketDataStoreMockRecorder struct {
	mock *MockMarketDataStore
}

// NewMockMarketDataStore creates a new mock instance
func NewMockMarketDataStore(ctrl *gomock.Controller) *MockMarketDataStore {
	mock := &MockMarketDataStore{ctrl: ctrl}
	mock.recorder = &MockMarketDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketDataStore) EXPECT() *MockMarketDataStoreMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockMarketDataStore) Save(ctx context.Context, prices []types.ProductPrice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, prices)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockMarketDataStoreMockRecorder) Save(ctx, prices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMarketDataStore)(nil).Save), ctx, prices)
}

// Get mocks base method
func (m *MockMarketDataStore) Get(ctx context.Context, sortType types.SortingType, directionType types.SortDirectionType, limit, offset int64) ([]types.ProductPriceExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, sortType, directionType, limit, offset)
	ret0, _ := ret[0].([]types.ProductPriceExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMarketDataStoreMockRecorder) Get(ctx, sortType, directionType, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMarketDataStore)(nil).Get), ctx, sortType, directionType, limit, offset)
}
